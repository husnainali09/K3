[gcode_macro _global_variables]
variable_verbose:     True  # Enable verbose output
gcode:

#[delayed_gcode START_ME_UP]
# Run on startup
#initial_duration: 1
#gcode:
#    # Aziz, LIGHT!
#    SET_LIGHT


[gcode_macro PRINT_START]
gcode:
    LEDs_Low
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set CHAMBER_TEMP = params.Chamber|default(0)|float %}

    
    CLEAR_PAUSE
    BED_MESH_CLEAR
    G28
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={150}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}
    
    G28 Z
    Z_TILT_ADJUST

    BED_MESH_CALIBRATE ADAPTIVE=1
    CARTOGRAPHER_TOUCH                ; Perform touch probe
    PURGE_MOVE
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}
    
    PURGE
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    M117 # Clearing text messages from console
    M107

[gcode_macro PRINT_END]
#   Superslicer end gcode:
# PRINT_END
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X1.0 Y1.0 F20000    ; move nozzle to remove stringing
    G90
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    
    PARK_IT
    UPDATE_DELAYED_GCODE ID=led_sleep DURATION=1800

    # Run the rebreather for 15 minutes after the print
    # UPDATE_DELAYED_GCODE ID=DELAY_REBREATHER_OFF DURATION={60 * 15}

# [delayed_gcode DELAY_REBREATHER_OFF]
# gcode:
#    SET_REBREATHER SPEED=0.0

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS

  PARK_IT

  # Run the rebreather for 15 minutes after the print
  # UPDATE_DELAYED_GCODE ID=DELAY_REBREATHER_OFF DURATION={60 * 15}

  CANCEL_PRINT_BASE
  
[gcode_macro PARK_IT]
gcode:
  {% set zH = 100 %}
  
  # Move the bed down
  {% if printer.toolhead.position.z > zH %}
    {% set zH = printer.toolhead.position.z + 1 %}
  {% endif %}

  G90                           ; absolute positioning
  G0  X90 Y180 Z{zH} F3600      ; park nozzle at rear and drop the bed to at least 50

[gcode_macro SET_REBREATHER]
gcode:
    {% set wanted_speed = params.SPEED|default(-1.0)|float %}
    {% set current_value = printer["fan_generic rebreather"].speed|float %}

    # If no params are provided, turn the rebreather on if its off, or off if its on.
    {% if wanted_speed == -1.0 %}
        {% if current_value == 0.0 %}
            {% set wanted_speed = 0.95 %}
        {% else %}
            {% set wanted_speed = 0.0 %}
        {% endif %}
    {% endif %}	 

    SET_FAN_SPEED FAN=rebreather SPEED={wanted_speed}

#[gcode_macro SET_LIGHT]
#gcode:
#    {% set current_value = printer["output_pin enclosure_light"].value|float %}
#    {% set wanted_value = params.VALUE|default(-1.0)|float %}
#
#    # Value not provided, figure out what we should do
#    {% if wanted_value == -1.0 %}
#        {% if current_value == 0.0 %}
#            {% set wanted_value = 0.5 %}
#        {% else %}
#            {% set wanted_value = 0.0 %}
#        {% endif %}
#    {% endif %}	
#
#    {% set int_wanted = (wanted_value * 100) | int %}
#    {% set int_current = (current_value * 100) | int %}
#
#    {% if wanted_value > current_value %}
#        {% for v in range(int_current, int_wanted + 1) %}
#            SET_PIN PIN=enclosure_light VALUE={v/100|float}
#        {% endfor %}
#    {% else %}
#        {% for v in range(int_current, int_wanted, -1) %}
#            SET_PIN PIN=enclosure_light VALUE={v/100|float}
#        {% endfor %}
#        SET_PIN PIN=enclosure_light VALUE={wanted_value}
#    {% endif %}   

[gcode_macro ACCEL_TEST]
description: Test given accel values acorss bed
gcode:
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set min_x = 0 %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set min_y = 0 %}

    # test config
    {% set config = {
      'accel'          : params.ACCEL|default(2500)|int,	# Test accel mm^2/sec
      'speed'          : params.SPEED|default(100)|int,		# Test speed mm/sec
      'wait'           : params.WAIT_MS|default(500)|int,	# Wait mSec between runs
      'x_padding'      : params.XPAD|default(5)|float,  	# padding around min/max x
      'y_padding'      : params.YPAD|default(5)|float,  	# padding around min/max y
    } %}

    SAVE_GCODE_STATE NAME=STATE_ACCEL_TEST

    M220 S100 							# Reset any scaling factors
    M221 S100 							# Reset any scaling factors

    # remove any exisiting clever stuff
    SET_VELOCITY_LIMIT VELOCITY={config.speed} ACCEL={config.accel} ACCEL_TO_DECEL={config.accel}
    SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0

    G1 F{config.speed * 60}
    M204 S{config.accel}

    M117 {config.speed}@{config.accel} X stepper
    G1 X{min_x+config.x_padding} Y{min_y+config.y_padding}
    G1 X{max_x-config.x_padding} Y{max_y-config.y_padding}
    G1 X{min_x+config.x_padding} Y{min_y+config.y_padding}
    G4 P{config.wait}
    M400

    M117 {config.speed}@{config.accel} Y stepper
    G1 X{min_x+config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G1 X{min_x+config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G4 P{config.wait}
    M400

    M117 {config.speed}@{config.accel} XY moves
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G1 X{min_x+config.x_padding} Y{min_y+config.y_padding}
    G1 X{min_x+config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G4 P{config.wait}
    M400

    M117 {config.speed}@{config.accel} Done

    RESTORE_GCODE_STATE NAME=STATE_ACCEL_TEST

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E15 F300                    ; quickly load filament to heatbreak
   G1 E70 F150                    ; slower extrusion for hotend path
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-120 F1200                  ; retract filament completely
   M82 

[gcode_macro abs_warmup_temp]
# params:
    # TEMP
gcode:
    {% set TEMP = params.TEMP|default(110) %}

	M106 S255					#turn part cooling fan on to blow heat around chamber
	M190 S100				    #set bed temperature and wait
	G28							#home machine
	G0 X90 Y90 Z20 F3000		#move to center of bed
	UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200

######################### LED #########################

[gcode_macro LEDs_Off]
gcode:
        SET_PIN PIN=Case_LED_Right VALUE=0
        SET_PIN PIN=Case_LED_Left VALUE=0

[gcode_macro LEDs_Low]
gcode:
        SET_PIN PIN=Case_LED_Right VALUE=0.2
        SET_PIN PIN=Case_LED_Left VALUE=0.2

[gcode_macro LEDs_High]
gcode:
        SET_PIN PIN=Case_LED_Right VALUE=0.8
        SET_PIN PIN=Case_LED_Left VALUE=0.8

### Sleep ###
[delayed_gcode led_sleep]
gcode:
    SET_PIN PIN=Case_LED_Right VALUE=0
    SET_PIN PIN=Case_LED_Left VALUE=0
    UPDATE_DELAYED_GCODE ID=led_sleep DURATION=1800

###SHAKE&TUNE###
[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.
