[scanner] # update cartographer to scanner
serial: /dev/serial/by-id/usb-Cartographer_614e_230002000243304858353520-if00
backlash_comp: 0.02
x_offset: -21.5
y_offset: 0
calibration_method: touch
sensor: cartographer
sensor_alt: carto
scanner_touch_max_retries: 10



[gcode_macro _purge_setup]
# Purge location
variable_purge_x: -8
variable_purge_y: 110

# How many wipes (back and forward is 1)
# Assumes wiping in back and forward for stock K3 bucket.
variable_wiper_wipes: 3
variable_wipe_distance: 20
variable_wipe_direction: '+'   # + or - to determine which way to wipe first 

gcode:

[gcode_macro PURGE]
gcode:
	{% set purge_amount = params.AMOUNT|default(10)|float  %}
	{% set purge_speed = params.SPEED|default(90)|float  %}

	PURGE_MOVE

	# Purge ze filament
	G92 E0
	G1 E{purge_amount} F{purge_speed}
	G92 E0

	# Tiny retract to stop oooooozing
	G1 E-.2 F2700
	G92 E0

	M400
	SCRUB_NOZZLE

[gcode_macro PURGE_MOVE]
gcode:
    _entry_point function=PURGE_MOVE

	# Go to the purge bucket
	G0 X{printer["gcode_macro _purge_setup"].purge_x} Y{printer["gcode_macro _purge_setup"].purge_y} F5000

    _exit_point function=PURGE_MOVE

[gcode_macro SCRUB_NOZZLE]
gcode:
	{% set wipe_start_y = printer["gcode_macro _purge_setup"].purge_y %}

	{% if printer["gcode_macro _purge_setup"].wipe_direction == '+' %}
		{% set wipe_end_y = wipe_start_y + printer["gcode_macro _purge_setup"].wipe_distance  %}
	{% else %}
		{% set wipe_end_y = wipe_start_y - printer["gcode_macro _purge_setup"].wipe_distance  %}
	{% endif %}

    _entry_point function=SCRUB_NOZZLE

	DROP_BED
	PURGE_MOVE

	{% for i in range(0, printer["gcode_macro _purge_setup"].wiper_wipes) %}
		G0 Y{wipe_end_y} F4000
		G0 Y{wipe_start_y} F4000
	{% endfor %}

	_exit_point function=SCRUB_NOZZLE

[gcode_macro PRINT_IDLE_TIMEOUT]
gcode:
  # Runs when the printer goes idle, this will force the conditional z tilt adjust to run
  # during the next START_PRINT
  SET_GCODE_VARIABLE MACRO=_state_variables VARIABLE=zta_required VALUE={True}

[gcode_macro G32]
gcode:
    Z_TILT_ADJUST